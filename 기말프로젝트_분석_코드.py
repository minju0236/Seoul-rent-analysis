# -*- coding: utf-8 -*-
"""빅데분 4(종합).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nFmx55Gn2U2IKY7a40d1Z6gohNOgwTvJ

# 대학 - 데이터탐색
"""

!apt-get -y install fonts-nanum

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm

# CSV 파일 불러오기
file_path = "서울시_대학.csv"
df = pd.read_csv(file_path, encoding='cp949')

# 폐교 및 사이버대학 제거
df = df[df["학교상태"] != "폐교"]
df = df[~df["학교종류"].str.contains("사이버", na=False)]

# 행정동 → 법정동 매핑 딕셔너리
hangjeong_to_beopjeong = {
    "공릉2동": "공릉동",
    "휘경2동": "휘경동",
    "신촌동": "창천동",
    "홍제2동": "홍제동",
    "연무장1동": "성수동",
    "장위2동": "장위동",
    "청운효자동": "청운동",
    "남가좌2동": "가좌동",
    "응암2동": "응암동",
    "창2동": "창동",
    "방배3동": "방배동",
    "서초1동": "서초동",
    "상계1동": "상계동",
    "상계6.7동": "상계동",
    "이문1동": "이문동",
    "우장산동": "화곡동",
    "종로1.2.3.4가동": "혜화동",
    "면목제3.8동": "면목동",
    "고척1동": "고척동",
    "월계1동": "월계동",
    "홍은2동": "홍은동",
    "신사1동": "신사동",
    "쌍문1동": "쌍문동",
    "논현2동": "논현동",
    "개봉1동": "개봉동",
    "정릉3동": "정릉동",
    "오류2동": "오류동",
    "월계2동": "월계동",
    "반포4동": "반포동",
    "사당3동": "사당동",
    "상도1동": "상도동"
}

# 4. 행정동 → 법정동 컬럼 생성
df["법정동명"] = df["행정동"].apply(lambda x: hangjeong_to_beopjeong.get(x, x))

# 5. 법정동 기준 대학 수 집계
beopjeong_counts = df["법정동명"].value_counts().sort_values(ascending=False)

# 6. 한글 폰트 설정 (Colab 기준 나눔고딕)
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
fontprop = fm.FontProperties(fname=font_path)

# 7. 시각화
plt.figure(figsize=(16, 6))
plt.bar(beopjeong_counts.index, beopjeong_counts.values, color='lightgreen')
plt.title("서울시 법정동 기준 대학 수", fontproperties=fontprop, fontsize=16)
plt.xlabel("법정동", fontproperties=fontprop)
plt.ylabel("대학 수", fontproperties=fontprop)
plt.xticks(rotation=90, fontproperties=fontprop)
plt.grid(axis='y', linestyle='--', alpha=0.4)
plt.tight_layout()
plt.show()

# 전체 대학 리스트
all_universities = df["학교명"].unique().tolist()

# 전체 개수 출력
print(f"총 대학 수: {len(all_universities)}개\n")

# 출력
chunk_size = 4
for i in range(0, len(all_universities), chunk_size):
    chunk = all_universities[i:i+chunk_size]
    print(chunk)

"""# 월세 - 데이터탐색"""

!fc-cache -fv
!rm -rf ~/.cache/matplotlib

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import logging

# 로깅 설정
logging.getLogger('matplotlib.font_manager').setLevel(logging.ERROR)

# 열 이름 수동 지정 후 CSV 불러오기
columns = [
    '접수년도', '자치구코드', '자치구명', '법정동코드', '법정동명', '지번구분코드', '지번구분',
    '본번', '부번', '층', '계약일', '전월세구분', '임대면적', '보증금(만원)', '임대료(만원)',
    '건물명', '건축년도', '건물용도', '계약기간', '신규계약구분', '갱신청구권사용',
    '종전보증금', '종전임대료'
]
df1 = pd.read_csv("서울특별시_전월세가_2024.csv", encoding='cp949', header=None, names=columns)
df1.columns = df1.columns.str.strip()  # 열 이름 공백 제거

# 법정동 정리
df1["법정동명_정리"] = df1["법정동명"].str.replace(r"[1-9]가$", "", regex=True)
print(df1["법정동명_정리"].unique())

print("법정동 종류 개수:", df1["법정동명_정리"].nunique())

# 법정동명_정리 별 데이터 개수 집계
dong_counts = df1["법정동명_정리"].value_counts()

# 상위 N개만 보기
top_n = 20
dong_counts = dong_counts.head(top_n)

# 시각화
plt.figure(figsize=(12, 6))
dong_counts.plot(kind='bar', color='skyblue')
plt.title("법정동별 데이터 개수 (상위 20개)", fontproperties=fontprop)
plt.xlabel("법정동명", fontproperties=fontprop)
plt.ylabel("데이터 개수", fontproperties=fontprop)
plt.xticks(rotation=45, ha='right', fontproperties=fontprop)
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

# 임대료 숫자형으로 변환
df1['임대료(만원)'] = pd.to_numeric(df1['임대료(만원)'], errors='coerce')
df1 = df1.dropna(subset=['임대료(만원)'])

# 법정동별 평균 월세 계산
avg_rent_by_dong = df1.groupby("법정동명_정리")["임대료(만원)"].mean()

# 내림차순 정렬 후 상위 20개 선택
top50_avg_rent = avg_rent_by_dong.sort_values(ascending=False).head(20)

# 시각화
plt.figure(figsize=(15, 8))
top50_avg_rent.plot(kind='bar', color='skyblue')
plt.title("법정동별 평균 월세 상위 20개", fontproperties=fontprop)
plt.xlabel("법정동명", fontproperties=fontprop)
plt.ylabel("평균 임대료 (만원)", fontproperties=fontprop)
plt.xticks(rotation=75, ha='right', fontproperties=fontprop)
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

# 건물용도별 데이터 개수 집계
building_type_counts = df1["건물용도"].value_counts()

# 시각화
plt.figure(figsize=(10, 6))
building_type_counts.plot(kind='bar', color='skyblue')
plt.title("건물용도별 데이터 개수", fontproperties=fontprop)
plt.xlabel("건물용도", fontproperties=fontprop)
plt.ylabel("데이터 개수", fontproperties=fontprop)
plt.xticks(rotation=45, ha='right', fontproperties=fontprop)
plt.tight_layout()
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.show()

# 임대면적 숫자형 변환 (오류 무시)
df1["임대면적"] = pd.to_numeric(df1["임대면적"], errors="coerce")

# 0 이상 값만 필터링
area_data = df1["임대면적"].dropna()
area_data = area_data[area_data > 0]

# 구간별 개수 집계
bin_counts = area_data.value_counts().sort_index()

# 시각화
plt.figure(figsize=(10, 6))
plt.boxplot(area_data, vert=False)
plt.title("임대면적 박스플롯", fontproperties=fontprop)
plt.xlabel("임대면적 (㎡)", fontproperties=fontprop)
plt.grid(True, linestyle='--', alpha=0.4)
plt.tight_layout()
plt.show()

"""# 지하철역 - 데이터탐색"""

import pandas as pd
import re

# CSV 불러오기
df2 = pd.read_csv("서울교통공사_역주소.csv", encoding='cp949')

# 괄호 안 법정동 추출
df2["괄호주소"] = df2["도로명주소"].str.extract(r"\((.*?)\)")

# 정제 대상 리스트
raw_dong_list = [
    '남대문로 5가', '종로1가', '종로3가', '종로5가', '을지로1가', '을지로3가', '을지로4가', '을지로7가',
    '성수동1가', '성수동2가', '문래동3가', '당산동3가', '당산동6가', '충정로3가', '필동2가', '장충동2가',
    '금호동4가', '동선동4가', '삼선동1가', '명륜4가', '종로6가', '광희동2가', '충무로2가', '한강로1가',
    '한강로2가', '용산동4가', '용산동5가', '양평동2가', '영등포동5가', '영등포동1가', '광희동1가', '금호동2가',
    '보문동1가', '안암동5가', '상도1동'
]

# 동 정제 함수 정의
def normalize_legal_dong(name):
    name = name.strip().replace(" ", "")
    name = re.sub(r'\d+동$', '동', name)
    name = re.sub(r'\d+가$', '', name)
    return name

# 정제 매핑 딕셔너리 생성
dong_mapping = {
    raw: normalize_legal_dong(raw)
    for raw in raw_dong_list
    if normalize_legal_dong(raw) != raw
}

# 정제된 동 이름 리스트 생성
cleaned_dong_list = []

full_dong_list = df2["괄호주소"].dropna().unique()
for name in full_dong_list:
    cleaned = dong_mapping.get(name, name)
    cleaned_dong_list.append(cleaned)

# 중복 제거 후 출력
cleaned_dong_list = sorted(set(cleaned_dong_list))
for dong in cleaned_dong_list:
    print(dong)

# df2에 정제된 동 이름 컬럼 추가
df2["법정동"] = df2["괄호주소"].apply(lambda x: dong_mapping.get(x, x) if pd.notna(x) else None)

# 호선별 역 개수 집계
line_counts = df2["호선"].value_counts().sort_index()

# 시각화
plt.figure(figsize=(10, 6))
plt.bar(line_counts.index, line_counts.values, color='plum')
plt.title("서울 지하철 호선별 역 개수", fontproperties=fontprop)
plt.xlabel("호선", fontproperties=fontprop)
plt.ylabel("역 개수", fontproperties=fontprop)
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

station_count_by_dong = df2.groupby("법정동")["역명"].count().reset_index()
station_count_by_dong.columns = ['법정동', '지하철역개수']
station_count_by_dong = station_count_by_dong.sort_values(by='지하철역개수', ascending=False)

# 상위 20개 추출
top20_station_counts = station_count_by_dong.head(20)

# 시각화
plt.figure(figsize=(12, 6))
plt.bar(top20_station_counts['법정동'], top20_station_counts['지하철역개수'], color='lightpink')
plt.title("법정동별 지하철역 개수 (상위 30개)", fontproperties=fontprop)
plt.xlabel("법정동", fontproperties=fontprop)
plt.ylabel("지하철역 개수", fontproperties=fontprop)
plt.xticks(rotation=75, ha='right', fontproperties=fontprop)
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

"""#가설1"""

# 1) 월세 데이터에서 법정동별 평균 월세 계산 (이 부분은 그대로)
df_monthly = df1[df1["전월세구분"] == "월세"].copy()
df_monthly["임대료(만원)"] = pd.to_numeric(df_monthly["임대료(만원)"], errors="coerce")
avg_rent_by_dong = df_monthly.groupby("법정동명")["임대료(만원)"].mean()

# 2) 대학이 위치한 법정동 리스트만 사용
college_dongs = beopjeong_counts.index.tolist()  # 이미 전처리된 대학가 동 리스트라고 가정

# 3) 대학가에 해당하는 평균 월세만 추출
avg_rent_college_only = avg_rent_by_dong[avg_rent_by_dong.index.isin(college_dongs)]

# 4) 전체 평균 vs 대학가 평균 비교
avg_total = avg_rent_by_dong.mean()
avg_college = avg_rent_college_only.mean()

print("서울 전체 평균 월세:", round(avg_total, 1), "만원")
print("대학가 평균 월세:", round(avg_college, 1), "만원")

# 시각화
plt.figure(figsize=(6, 5))
plt.bar(["서울 전체 평균", "대학가 평균"], [avg_total, avg_college], color=["gray", "turquoise"])
plt.title("대학가 vs 서울 전체 평균 월세", fontproperties=fontprop)
plt.ylabel("임대료(만원)", fontproperties=fontprop)
plt.xticks(fontproperties=fontprop)
plt.grid(axis='y', linestyle='--', alpha=0.4)
plt.tight_layout()
plt.show()

"""면적이 작아서 싼건지"""

df_monthly["임대면적"] = pd.to_numeric(df_monthly["임대면적"], errors="coerce")
df_monthly["㎡당임대료"] = df_monthly["임대료(만원)"] / df_monthly["임대면적"]

# 전체 평균
avg_per_sqm_total = df_monthly["㎡당임대료"].mean()

# 대학가만 필터링
college_dongs = beopjeong_counts.index.tolist()
df_college = df_monthly[df_monthly["법정동명"].isin(college_dongs)]

# 대학가 평균
avg_per_sqm_college = df_college["㎡당임대료"].mean()

print("서울 전체 ㎡당 평균 임대료:", round(avg_per_sqm_total, 2), "만원/㎡")
print("대학가 ㎡당 평균 임대료:", round(avg_per_sqm_college, 2), "만원/㎡")

plt.figure(figsize=(6, 5))
plt.bar(["서울 전체", "대학가"],
        [avg_per_sqm_total, avg_per_sqm_college],
        color=["gray", "turquoise"])
plt.title("㎡당 평균 임대료 비교", fontproperties=fontprop)
plt.ylabel("임대료 (만원/㎡)", fontproperties=fontprop)
plt.xticks(fontproperties=fontprop)
plt.grid(axis='y', linestyle='--', alpha=0.3)
plt.tight_layout()
plt.show()

"""대학가별 평균 월세 비교"""

# 1. 법정동별 평균 월세 계산
avg_rent_by_dong = df_monthly.groupby("법정동명")["임대료(만원)"].mean().reset_index()

# 2. 대학이 있는 법정동만 필터링
avg_rent_per_college = avg_rent_by_dong[avg_rent_by_dong["법정동명"].isin(college_dongs)]

# 3. 임대료 기준 내림차순 정렬
avg_rent_per_college = avg_rent_per_college.sort_values(by="임대료(만원)", ascending=False)

# 4. 시각화 (x축: 법정동명)
plt.figure(figsize=(14, 6))
plt.bar(avg_rent_per_college["법정동명"], avg_rent_per_college["임대료(만원)"], color='turquoise')
plt.title("대학가별 평균 월세 (법정동 단위)", fontproperties=fontprop)
plt.ylabel("임대료(만원)", fontproperties=fontprop)
plt.xticks(rotation=75, ha='right', fontproperties=fontprop)
plt.grid(axis='y', linestyle='--', alpha=0.4)
plt.tight_layout()
plt.show()

"""대학가라 비싼건지, 원래 비싼 동네에 대학이 있어서 그런건"""

# 1. 월세 데이터 필터링
df_monthly = df1[df1["전월세구분"] == "월세"].copy()

# 2. 숫자형 변환
df_monthly["임대료(만원)"] = pd.to_numeric(df_monthly["임대료(만원)"], errors="coerce")

# 3. 법정동별 평균 월세 계산
avg_rent_by_dong = df_monthly.groupby(["자치구명", "법정동명"])["임대료(만원)"].mean().reset_index()

# 4. 대학 유무 플래그 추가
avg_rent_by_dong["대학유무"] = avg_rent_by_dong["법정동명"].apply(
    lambda x: "대학 있음" if x in beopjeong_counts.index else "대학 없음"
)

# 5. 자치구 + 대학유무별 평균 계산
grouped = avg_rent_by_dong.groupby(["자치구명", "대학유무"])["임대료(만원)"].mean().reset_index()

# 6. 피벗 테이블 만들기
pivot = grouped.pivot(index="자치구명", columns="대학유무", values="임대료(만원)").dropna()

# 7. 차이 계산
pivot["차이(만원)"] = pivot["대학 있음"] - pivot["대학 없음"]
pivot = pivot.sort_values("차이(만원)", ascending=False)

plt.figure(figsize=(12, 6))
pivot["차이(만원)"].plot(kind="bar", color="turquoise")
plt.axhline(0, color="black", linewidth=0.8)
plt.title("자치구 내 대학 유무에 따른 법정동 평균 월세 차이", fontproperties=fontprop)
plt.ylabel("대학 있음 - 없음 (만원)", fontproperties=fontprop)
plt.xticks(rotation=75, fontproperties=fontprop)
plt.grid(axis='y', linestyle='--', alpha=0.4)
plt.tight_layout()
plt.show()

"""# 가설2"""

# 1-1. 지하철 있는 법정동 리스트 생성
subway_dongs = df2["법정동"].dropna().unique().tolist()

# 1-2. 월세 데이터에서 월세만 필터링
df_monthly = df1[df1["전월세구분"] == "월세"].copy()
df_monthly["임대료(만원)"] = pd.to_numeric(df_monthly["임대료(만원)"], errors="coerce")

# 1-3. 대학이 있는 법정동만 필터링
df_college = df_monthly[df_monthly["법정동명"].isin(college_dongs)].copy()

# 1-4. 대학가 평균 월세 계산
avg_rent_college = df_college.groupby("법정동명")["임대료(만원)"].mean().reset_index()

# 지하철 접근성 플래그 추가
avg_rent_college["접근성"] = avg_rent_college["법정동명"].apply(
    lambda x: "지하철 있음" if x in subway_dongs else "지하철 없음"
)

# 접근성 그룹별 평균
avg_by_access = avg_rent_college.groupby("접근성")["임대료(만원)"].mean()

# 시각화
plt.figure(figsize=(6, 5))
plt.bar(avg_by_access.index, avg_by_access.values, color=["lightgray", "lightgreen"])
plt.title("대학가 지하철 접근성에 따른 평균 월세", fontproperties=fontprop)
plt.ylabel("평균 월세 (만원)", fontproperties=fontprop)
plt.xticks(fontproperties=fontprop)
plt.grid(axis='y', linestyle='--', alpha=0.3)
plt.tight_layout()
plt.show()

# 수치 출력
print("접근성별 평균 월세:\n", avg_by_access.round(2))

"""가설과 다름"""

# [1] 전월세 데이터 불러오기
df_rent = pd.read_csv("서울특별시_전월세가_2024.csv", encoding="cp949")
df_rent = df_rent[df_rent["전월세구분"] == "월세"].copy()
df_rent["임대료(만원)"] = pd.to_numeric(df_rent["임대료(만원)"], errors="coerce")

# [2] 법정동별 평균 임대료 계산
avg_rent_by_dong = df_rent.groupby("법정동명")["임대료(만원)"].mean().reset_index()

# [3] 지하철 주소 데이터 처리
df_subway = pd.read_csv("서울교통공사_역주소.csv", encoding="cp949")
df_subway["괄호주소"] = df_subway["도로명주소"].str.extract(r"\((.*?)\)")
df_subway = df_subway.dropna(subset=["괄호주소"])
subway_counts = df_subway["괄호주소"].value_counts().reset_index()
subway_counts.columns = ["법정동명", "지하철역개수"]

# [4] 병합
merged = pd.merge(avg_rent_by_dong, subway_counts, on="법정동명", how="left")
merged["지하철역개수"] = merged["지하철역개수"].fillna(0)

# [5] 상관계수 확인
correlation = merged["임대료(만원)"].corr(merged["지하철역개수"])
print("📊 지하철 개수와 월세 평균의 상관계수:", round(correlation, 3))

# [1] 대학가 법정동 리스트 추출
college_dongs = df["법정동명"].dropna().unique()

# [2] 대학가 필터링
college_df = merged[merged["법정동명"].isin(college_dongs)]

# [3] 상관계수 계산
college_corr = college_df["임대료(만원)"].corr(college_df["지하철역개수"])
print("🎓 대학가 내 지하철 개수와 월세 평균의 상관계수:", round(college_corr, 3))

# [1] 대학 위치 법정동
college_dongs_set = set(college_dongs)

# [2] 지하철 위치 법정동
subway_dongs_set = set(df_subway["괄호주소"].dropna().unique())

# [3] 교집합 비율
intersection = college_dongs_set & subway_dongs_set
overlap_rate = len(intersection) / len(college_dongs_set)
print(f"🧩 대학가 중 지하철역이 존재하는 비율: {round(overlap_rate * 100, 1)}%")

"""#가설3"""

import seaborn as sns

# 건물별 평균 임대료 계산
avg_by_type = df_rent.groupby("건물용도")["임대료(만원)"].mean().reset_index()

# 시각화 - 막대그래프
plt.figure(figsize=(12, 6))
bar = sns.barplot(data=avg_by_type, x="건물용도", y="임대료(만원)",
                  palette=["pink"] * len(avg_by_type),
                  order=avg_by_type.sort_values("임대료(만원)", ascending=False)["건물용도"])

# 평균선 추가
overall_avg = df_rent["임대료(만원)"].mean()
plt.axhline(y=overall_avg, color='gray', linestyle='--', label=f'전체 평균: {overall_avg:.1f}만원')
plt.legend(prop=fontprop)

# 숫자 주석
for i, val in enumerate(avg_by_type.sort_values("임대료(만원)", ascending=False)["임대료(만원)"]):
    plt.text(i, val + 1, f'{val:.1f}', ha='center', fontproperties=fontprop)

# 제목/축 설정
plt.title("건물용도별 평균 월세", fontproperties=fontprop, fontsize=14)
plt.xlabel("건물용도", fontproperties=fontprop)
plt.ylabel("평균 임대료 (만원)", fontproperties=fontprop)
plt.xticks(fontproperties=fontprop)
plt.yticks(fontproperties=fontprop)
plt.grid(axis='y', linestyle='--', alpha=0.3)
plt.tight_layout()
plt.show()

"""대학가가 있는 법정동만 필터링한 데이터"""

# 1. 대학 위치 데이터 불러오기 및 정제
df_college = pd.read_csv("서울시_대학.csv", encoding="cp949")
df_college = df_college[df_college["학교상태"] != "폐교"]
df_college = df_college[~df_college["학교종류"].str.contains("사이버", na=False)]
df_college["법정동명"] = df_college["행정동"].apply(lambda x: hangjeong_to_beopjeong.get(x, x))

# 2. 대학가 법정동 리스트 만들기
college_dongs = df_college["법정동명"].unique()

# 3. 월세 데이터에서 대학가에 해당하는 데이터만 필터링
college_rent_df = df_rent[df_rent["법정동명"].isin(college_dongs)]

# 4. 건물용도별 평균 임대료 계산
avg_by_type_college = college_rent_df.groupby("건물용도")["임대료(만원)"].mean().reset_index()

# 5. 시각화 - 막대그래프
plt.figure(figsize=(12, 6))
bar = sns.barplot(data=avg_by_type_college,
                  x="건물용도",
                  y="임대료(만원)",
                  palette=["pink"] * len(avg_by_type_college),
                  order=avg_by_type_college.sort_values("임대료(만원)", ascending=False)["건물용도"])

# 평균선 추가
college_avg = college_rent_df["임대료(만원)"].mean()
plt.axhline(y=college_avg, color='gray', linestyle='--', label=f'대학가 평균: {college_avg:.1f}만원')
plt.legend(prop=fontprop)

# 숫자 주석
for i, val in enumerate(avg_by_type_college.sort_values("임대료(만원)", ascending=False)["임대료(만원)"]):
    plt.text(i, val + 1, f'{val:.1f}', ha='center', fontproperties=fontprop)

# 제목/축 설정
plt.title("대학가 건물용도별 평균 월세", fontproperties=fontprop, fontsize=14)
plt.xlabel("건물용도", fontproperties=fontprop)
plt.ylabel("평균 임대료 (만원)", fontproperties=fontprop)
plt.xticks(fontproperties=fontprop)
plt.yticks(fontproperties=fontprop)
plt.grid(axis='y', linestyle='--', alpha=0.3)
plt.tight_layout()
plt.show()

# 시각화
plt.figure(figsize=(12, 6))
sns.boxplot(
    x='건물용도',
    y='임대료(만원)',
    data=df_rent,
    palette='pink'  # 기본 pink 색상 사용
)

plt.title("건물 유형별 월세 분포", fontsize=14, fontproperties=fontprop)
plt.xlabel("건물 유형", fontsize=12, fontproperties=fontprop)
plt.ylabel("임대료(만원)", fontsize=12, fontproperties=fontprop)
plt.xticks(fontproperties=fontprop)
plt.yticks(fontproperties=fontprop)
plt.grid(axis='y', linestyle='--', alpha=0.3)
plt.tight_layout()
plt.show()

# 1. 법정동별 건물용도 개수 집계
building_counts = df_rent.groupby(["법정동명", "건물용도"]).size().reset_index(name="건물수")

# 2. 피벗 테이블로 변환
building_pivot = building_counts.pivot(index="법정동명", columns="건물용도", values="건물수").fillna(0)

# 건물유형 리스트와 색상 지정
building_types = ["오피스텔", "단독다가구", "아파트", "연립다세대"]
colors = ["lightcoral", "skyblue", "lightgreen", "plum"]

# 반복문으로 각 유형별 상위 10개 시각화
for b_type, color in zip(building_types, colors):
    top10 = building_pivot.sort_values(by=b_type, ascending=False).head(10)

    plt.figure(figsize=(12, 6))
    top10[b_type].plot(kind="bar", color=color)
    plt.title(f"법정동별 {b_type} 개수 상위 10곳", fontproperties=fontprop)
    plt.xlabel("법정동", fontproperties=fontprop)
    plt.ylabel(f"{b_type} 수", fontproperties=fontprop)
    plt.xticks(rotation=45, fontproperties=fontprop)
    plt.grid(axis="y", linestyle="--", alpha=0.5)
    plt.tight_layout()
    plt.show()

"""#결론"""

# 시각화용 정제 데이터 (앞서 df_vis_sorted 기준)
df_plot = df_vis_sorted.copy()

# 시각화
fig, axes = plt.subplots(1, 3, figsize=(18, 5))

# ① 보증금 vs 임대료
axes[0].scatter(df_plot["보증금(만원)"], df_plot["임대료(만원)"], color='steelblue')
axes[0].set_xlabel("보증금 (만원)", fontproperties=fontprop)
axes[0].set_ylabel("임대료 (만원)", fontproperties=fontprop)
axes[0].set_title("보증금 vs 임대료", fontproperties=fontprop)
axes[0].grid(True, linestyle='--', alpha=0.5)

# ② 실질 월부담 (보증금 환산) vs 면적
interest_rate = 0.05  # 5% 연이율 기준
df_plot["실질월부담"] = df_plot["임대료(만원)"] + (df_plot["보증금(만원)"] * interest_rate / 12)
axes[1].scatter(df_plot["실질월부담"], df_plot["임대면적"], color='darkorange')
axes[1].set_xlabel("실질 월부담 (만원)", fontproperties=fontprop)
axes[1].set_ylabel("임대면적 (㎡)", fontproperties=fontprop)
axes[1].set_title("실질 월부담 vs 임대면적", fontproperties=fontprop)
axes[1].grid(True, linestyle='--', alpha=0.5)

# ③ 보증금 vs 기존 가성비지수
axes[2].scatter(df_plot["보증금(만원)"], df_plot["가성비지수"], color='seagreen')
axes[2].set_xlabel("보증금 (만원)", fontproperties=fontprop)
axes[2].set_ylabel("가성비지수 (㎡ ÷ 임대료)", fontproperties=fontprop)
axes[2].set_title("보증금 vs 가성비지수", fontproperties=fontprop)
axes[2].grid(True, linestyle='--', alpha=0.5)

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# 특수기호 제거한 컬럼명
df_vis_sorted_eng_simple = df_vis_sorted.rename(columns={
    "보증금(만원)": "Deposit",
    "임대료(만원)": "Rent",
    "임대면적": "Area",
    "가성비지수": "ValueIndex"
})

# 상관관계 계산
cols = ["Deposit", "Rent", "Area", "ValueIndex"]
corr = df_vis_sorted_eng_simple[cols].corr()

# 히트맵 그리기
plt.figure(figsize=(6, 4))
sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation between Features")
plt.tight_layout()
plt.show()

import statsmodels.api as sm

X = df_vis_sorted[["보증금(만원)", "임대료(만원)"]]
y = df_vis_sorted["가성비지수"]

# 상수항 추가 (절편)
X = sm.add_constant(X)

# 회귀 모델 피팅
model = sm.OLS(y, X).fit()
print(model.summary())

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# 클러스터링 대상 변수
features = df_vis_sorted[["보증금(만원)", "임대료(만원)", "임대면적"]]
scaler = StandardScaler()
scaled = scaler.fit_transform(features)

# KMeans 클러스터링
kmeans = KMeans(n_clusters=3, random_state=42)
df_vis_sorted["클러스터"] = kmeans.fit_predict(scaled)

# ✅ 지하철 유무 컬럼 추가
subway_dong_set = set(df2["법정동"].dropna().unique())
df_vis_sorted["지하철유무"] = df_vis_sorted["법정동명"].apply(
    lambda x: "지하철O" if x in subway_dong_set else "지하철X"
)

# 가성비 높은 상위 20개 매물 출력
summary_table = df_vis_sorted[["법정동명", "건물용도", "보증금(만원)", "임대료(만원)", "임대면적", "가성비지수", "지하철유무"]]
summary_table.head(20).style.background_gradient(cmap="YlGnBu", subset=["가성비지수"])

# 반전세 기준: 보증금 ≥ 월세 × 240
# 보증금이 0 이상인 정상 데이터만 필터링
df_filtered = df_vis_sorted[
    (df_vis_sorted["보증금(만원)"] < df_vis_sorted["임대료(만원)"] * 240) &
    (df_vis_sorted["보증금(만원)"] > 0)
]


# 보증금 구간 정의
deposit_ranges = [
    (0, 1000),
    (1001, 2000),
    (2001, 3000),
    (3001, float('inf'))  # 3001만원 이상은 하나로 묶기
]

# 구간별 출력
for start, end in deposit_ranges:
    label = f"{start}만원 이상" if end == float('inf') else f"{start}만원 ~ {end}만원"
    print(f"\n📌 보증금 구간: {label}\n")

    filtered = df_filtered[
        (df_filtered["보증금(만원)"] >= start) &
        (df_filtered["보증금(만원)"] <= end if end != float('inf') else True)
    ][["법정동명", "건물용도", "보증금(만원)", "임대료(만원)", "임대면적", "가성비지수", "지하철유무"]]

    display(
        filtered.sort_values(by="가성비지수", ascending=False)
        .head(20)
        .style.background_gradient(cmap="YlGnBu", subset=["가성비지수"])
    )