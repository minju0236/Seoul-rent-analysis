# -*- coding: utf-8 -*-
"""데이터->위도경도 변환.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xcWIRa3zZnkEt9HT4CtNRgRrm8uW_b2N
"""

import pandas as pd
import requests
from tqdm import tqdm
import re

# ✅ 너의 API 키 (보안 중요!)
API_KEY = "devU01TX0FVVEgyMDI1MDYwNTIwMjA1NDExNTgyMTY="

# 📍 주소 → 위도/경도 변환 함수
def get_coords_juso(address):
    url = "https://business.juso.go.kr/addrlink/addrLinkApi.do"
    params = {
        "confmKey": API_KEY,
        "currentPage": 1,
        "countPerPage": 1,
        "keyword": address,
        "resultType": "json"
    }

    try:
        response = requests.get(url, params=params, timeout=3)
        result = response.json()
        juso = result['results']['juso']
        if juso:
            x = float(juso[0]['entX'])  # 경도
            y = float(juso[0]['entY'])  # 위도
            return pd.Series([y, x])
        else:
            return pd.Series([None, None])
    except Exception as e:
        print(f"❗ 오류 발생: {address} → {e}")
        return pd.Series([None, None])

# ✅ 진행률 표시
tqdm.pandas()

# 📂 CSV 불러오기
df = pd.read_csv('/content/아파트(전월세)_실거래가.csv', encoding='cp949')

# ✅ 결측 제거 (도로명, 본번, 부번)
df = df[df['도로명'].notnull() & df['본번'].notnull() & df['부번'].notnull()]

# ✅ 문자열 정제
df['시군구'] = df['시군구'].astype(str).str.strip()
df['도로명'] = df['도로명'].astype(str).str.strip()
df['본번'] = df['본번'].astype(str).str.strip()
df['부번'] = df['부번'].astype(str).str.strip()

# ✅ 전체주소 생성 (도로명주소: 시군구 + 도로명 + 본번-부번)
df['전체주소'] = df['시군구'] + ' ' + df['도로명'] + ' ' + df['본번'] + '-' + df['부번']

# ✅ 중복 주소만 추출해서 위경도 얻기
df_unique = df[['전체주소']].drop_duplicates().reset_index(drop=True)
df_unique[['위도', '경도']] = df_unique['전체주소'].progress_apply(get_coords_juso)

# ✅ 병합
df = df.merge(df_unique, on='전체주소', how='left')

# ✅ 저장
df.to_csv('/content/아파트_위경도_완성.csv', index=False)
print("🎉 처리 완료! 위경도 포함된 파일 저장 완료")

# 위경도 붙인 후 최종 df만 불러와서 다시 저장
import pandas as pd

df = pd.read_csv('/content/아파트_위경도_완성.csv', encoding='utf-8')  # 기존 파일 불러오기
df.to_csv('/content/아파트_위경도_완성_excel용.csv', index=False, encoding='cp949')  # 엑셀 호환용으로 재저장

print("📄 엑셀에서 잘 열리는 CSV 저장 완료!")

import os

# ✅ tqdm 진행률
tqdm.pandas()

# 📂 CSV 불러오기
df = pd.read_csv('/content/연립다세대(전월세)_실거래가.csv', encoding='cp949')

# ✅ 결측 제거
df = df[df['도로명'].notnull() & df['본번'].notnull() & df['부번'].notnull()]

# ✅ 문자열 정제
df['시군구'] = df['시군구'].astype(str).str.strip()
df['도로명'] = df['도로명'].astype(str).str.strip()
df['본번'] = df['본번'].astype(str).str.strip()
df['부번'] = df['부번'].astype(str).str.strip()

# ✅ 전체주소 생성
df['전체주소'] = df['시군구'] + ' ' + df['도로명'] + ' ' + df['본번'] + '-' + df['부번']

# ✅ 캐시 파일 경로
cache_path = '/content/address_cache.csv'

# ✅ 기존 캐시 불러오기
if os.path.exists(cache_path):
    cache_df = pd.read_csv(cache_path)
else:
    cache_df = pd.DataFrame(columns=['전체주소', '위도', '경도'])

# ✅ 새로 요청할 주소만 필터링
new_addresses = df[~df['전체주소'].isin(cache_df['전체주소'])][['전체주소']].drop_duplicates()
print(f"✨ 새로 조회할 주소 수: {len(new_addresses)}")

# ✅ 위경도 가져오기
new_addresses[['위도', '경도']] = new_addresses['전체주소'].progress_apply(get_coords_juso)

# ✅ 캐시 업데이트
cache_df = pd.concat([cache_df, new_addresses], ignore_index=True).drop_duplicates(subset='전체주소')
cache_df.to_csv(cache_path, index=False)

# ✅ 병합
df = df.merge(cache_df, on='전체주소', how='left')

# ✅ 저장
df.to_csv('/content/연립다세대_위경도_완성.csv', index=False, encoding='cp949')
print("✅ 연립다세대 완료! 위경도 포함 CSV 저장됨")