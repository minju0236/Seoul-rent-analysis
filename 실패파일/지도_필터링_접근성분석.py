# -*- coding: utf-8 -*-
"""제발 되게 해주세요 (0606).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OmpOfleI06bsXGzK4-LGkRTo1cUaGQ0F
"""

import pandas as pd
import folium
from folium.plugins import MarkerCluster
from tqdm import tqdm
import time

# 1. CSV 불러오기
df_univ = pd.read_csv("서울시_대학_좌표.csv", encoding="cp949")
df_apt = pd.read_csv("아파트_좌표.csv", encoding="cp949")

# 2. 지도 생성
m = folium.Map(location=[37.5665, 126.9780], zoom_start=11)

# 3. 대학 마커 (파란색)
univ_cluster = MarkerCluster(name="대학").add_to(m)
print("🎓 대학 마커 찍는 중...")
start_univ = time.time()

for _, row in tqdm(df_univ.iterrows(), total=len(df_univ), desc="대학"):
    folium.Marker(
        location=[row["위도"], row["경도"]],
        popup=row["학교명"],
        icon=folium.Icon(color="blue", icon="university", prefix="fa")
    ).add_to(univ_cluster)

print(f"✅ 대학 마커 완료! ⏱️ {time.time() - start_univ:.2f}초")

# 4. 아파트 마커 (빨간색)
apt_cluster = MarkerCluster(name="아파트").add_to(m)
print("🏠 아파트 마커 찍는 중...")
start_apt = time.time()

for _, row in tqdm(df_apt.iterrows(), total=len(df_apt), desc="아파트"):
    folium.Marker(
        location=[row["위도"], row["경도"]],
        popup=row["주소"] if "주소" in row else "아파트",
        icon=folium.Icon(color="red", icon="home", prefix="fa")
    ).add_to(apt_cluster)

print(f"✅ 아파트 마커 완료! ⏱️ {time.time() - start_apt:.2f}초")

# 5. 레이어 컨트롤 추가
folium.LayerControl().add_to(m)

# 6. 저장
m.save("대학_아파트_지도.html")
print("💾 지도 저장 완료! 🎉")

import pandas as pd
import requests
from tqdm import tqdm

# ✅ Kakao API 키 입력
KAKAO_API_KEY = "KakaoAK 4a8ab5a61e4fafff2659520839bbb818"

# ✅ 좌표 변환 함수
def get_coords_kakao(address):
    headers = {"Authorization": KAKAO_API_KEY}
    url = "https://dapi.kakao.com/v2/local/search/address.json"
    params = {"query": address}
    try:
        res = requests.get(url, headers=headers, params=params, timeout=3)
        docs = res.json().get("documents")
        if docs:
            return pd.Series([float(docs[0]["y"]), float(docs[0]["x"])])
    except:
        pass
    return pd.Series([None, None])

# ✅ CSV 불러오기
df = pd.read_csv("서울교통공사_역주소.csv", encoding="cp949")

# ✅ tqdm으로 진행률 보기
tqdm.pandas()

# ✅ 위도/경도 붙이기 (컬럼명: 도로명주소)
df[['위도', '경도']] = df['도로명주소'].progress_apply(get_coords_kakao)

# ✅ 저장
df.to_csv("서울교통공사_역주소_좌표포함.csv", index=False, encoding="utf-8-sig")
print("🎉 저장 완료: 서울교통공사_역주소_좌표포함.csv")

import pandas as pd
import requests
from tqdm import tqdm
import time

# ✅ Kakao Mobility API 키 설정
KAKAO_REST_API_KEY = "KakaoAK 4a8ab5a61e4fafff2659520839bbb818"
headers = {"Authorization": KAKAO_REST_API_KEY}

# ✅ CSV 파일 불러오기
df_apt = pd.read_csv("아파트_좌표.csv", encoding="cp949")
df_univ = pd.read_csv("서울시_대학_좌표.csv", encoding="cp949")
df_station = pd.read_csv("지하철역_좌표.csv", encoding="utf-8")

# ✅ 도보 시간 요청 함수 (초 반환)
def get_walk_time_kakao(start_lat, start_lng, end_lat, end_lng):
    url = "https://apis-navi.kakaomobility.com/v1/directions"
    params = {
        "origin": f"{start_lng},{start_lat}",
        "destination": f"{end_lng},{end_lat}",
        "priority": "TIME",
        "car_fuel": "GASOLINE",
        "car_hipass": False
    }
    try:
        res = requests.get(url, headers=headers, params=params, timeout=5)
        if res.status_code == 200:
            data = res.json()
            return data['routes'][0]['summary']['duration']  # 단위: 초
    except:
        pass
    return None

# ✅ tqdm 적용
tqdm.pandas()

# ✅ 가장 가까운 대학 찾기
def get_closest_univ(row):
    min_time = float('inf')
    closest_name = None
    for _, u in df_univ.iterrows():
        t = get_walk_time_kakao(row['위도'], row['경도'], u['위도'], u['경도'])
        if t is not None and t < min_time:
            min_time = t
            closest_name = u['학교명']
    return pd.Series([min_time if min_time != float('inf') else None, closest_name])

# ✅ 가장 가까운 지하철 찾기
def get_closest_station(row):
    min_time = float('inf')
    closest_name = None
    for _, s in df_station.iterrows():
        t = get_walk_time_kakao(row['위도'], row['경도'], s['위도'], s['경도'])
        if t is not None and t < min_time:
            min_time = t
            closest_name = s['역명']
    return pd.Series([min_time if min_time != float('inf') else None, closest_name])

# ✅ 시간 측정 시작
start = time.time()

# ✅ 도보 시간 계산 수행
df_apt[["대학_도보시간(초)", "가까운_대학명"]] = df_apt.progress_apply(get_closest_univ, axis=1)
df_apt[["지하철_도보시간(초)", "가까운_지하철역명"]] = df_apt.progress_apply(get_closest_station, axis=1)

# ✅ 초 → 분 변환
df_apt["대학_도보시간(분)"] = (df_apt["대학_도보시간(초)"] // 60).astype("Int64")
df_apt["지하철_도보시간(분)"] = (df_apt["지하철_도보시간(초)"] // 60).astype("Int64")

print(f"🔄 전체 시간: {time.time() - start:.2f}초")

# ✅ 조건 필터링: 대학 15분 이내 & 지하철 10분 이내
df_filtered = df_apt[
    (df_apt["대학_도보시간(초)"] <= 900) &  # 15분
    (df_apt["지하철_도보시간(초)"] <= 600)  # 10분
]

# ✅ 결과 저장
df_filtered.to_csv("카카오_도보조건_대학역세권_아파트.csv", index=False, encoding="cp949")
print("✅ 저장 완료: 카카오_도보조건_대학역세권_아파트.csv")

import requests

# ✅ Kakao Mobility에서 발급받은 REST API 키 (주의: "KakaoAK " 포함)
KAKAO_REST_API_KEY = "KakaoAK 4a8ab5a61e4fafff2659520839bbb818"

# ✅ 요청 헤더
headers = {
    "Authorization": KAKAO_REST_API_KEY
}

# ✅ 출발지(origin)와 도착지(destination)
params = {
    "origin": "126.970833,37.554722",       # 서울역 (lng, lat)
    "destination": "126.9779451,37.5662952",  # 시청역 (lng, lat)
    "priority": "TIME",  # 시간 기준 도보 경로
    "car_fuel": "GASOLINE",  # 도보에도 필요 없지만 필수 필드인 경우 대비
    "car_hipass": False      # 도보에도 필요 없지만 필수 필드인 경우 대비
}

# ✅ 도보 요청 URL
url = "https://apis-navi.kakaomobility.com/v1/directions"

# ✅ GET 요청 보내기
res = requests.get(url, headers=headers, params=params)

# ✅ 응답 확인
print(f"📡 상태코드: {res.status_code}")
try:
    data = res.json()
    if 'routes' in data:
        summary = data['routes'][0]['summary']
        print(f"🚶 도보 거리: {summary['distance']}m")
        print(f"⏱️ 예상 시간: {summary['duration']//60}분")
    else:
        print("❌ 경로 없음:", data)
except Exception as e:
    print("❌ 오류:", e)

print("🔐 요청 헤더:")
for k, v in headers.items():
    print(f"{k}: {v}")